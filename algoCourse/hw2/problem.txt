Shortest path on a graph with strangely defined weights: version II
Task
We are given a directed graph G=(V,E) and a source node s in V. The graph has weighted edges, and the weights are defined in the following "recursive" way: for each edge (p,q), its weight is 1 iff the shortest path distance from s to p in graph G is an even number (including 0), otherwise its weight is 3. In so weighted graph, given a destination node t, compute the shortest path from s to t using Dijkstra's algorithm with "early exit" strategy. (Suggestion: take time to think about this definition of weights and to get convinced that it is well-stated.)

Input:
Input file named input.txt is formatted as follows:
1st line: number of vertices |V| (single positive integer)
2nd line: number of edges m=|E| (single positive integer)
3rd line: index of source node s
4th line: indexes of destination node t
following m lines: pairs of vertices representing edges, separated by a space, where vertices are numbered from 0 to n-1

Output:
Output file named output.txt should contain the single number: cost of the shortest path from s to t

Example 1:
input.txt

5
6
0
4
0 1
1 2
2 3
3 4
1 4
2 4
output.txt
4
Technical remarks
For implementing priority queue, you are not allowed to use a standard library, you have to implement it yourself.

Standard input/output is not supported, respect names input.txt and output.txt for input and output files respectively.
