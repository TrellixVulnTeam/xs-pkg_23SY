Strace proposal (Google Summer Of Code 2017)

Note: If you are not against, I will follow the guideline you given

-> Name:
	Edgar Kaziakhmedov
-> Title of proposal:
	The advanced syscall information tool.
-> Abstract of proposal:
	Everyone accepts that strace is one the most useful program for
	developers. And to make the output more understandable, I want to
	improve the informativeness of syscalls. Let's consider two general
	approaches to the problem:
	1) Extend the existing strace output
	2) Write the complementary tool

	It seems like the first way is looking better. Extending an
	existing format, we will definitely make the users confused, as
	a backward compatibility will be lost. Moreover, a well-known
	vim syntax highlight will be broken. Thus, the second variant is
	more preferable. Because, this is well known, that the program
	should not be overloaded, doing a job well.

	To sum up, the output is purposed for people and providing all
	information about syscall(syscall number, meaning of flags, etc) can
	significantly reduce the debug time.

-> Detailed description of your idea including explanation on why is
   it innovative and what it will contribute:

	Why is it essential to make an advanced syscall info tool, is not
	it enough to look up the syscall info in the man page?

	Well, not to mention general users, even a experienced people often
	need to find the information of syscalls, the number of which
	amounts to ~350. As confirmation, the retrieval time in man takes
	around 20 sec(at best) against a few seconds(in case of built-in info).
	As evident, the look-up time can be greatly saved.

-> Description of previous work, existing solutions (links to prototypes,
   bibliography are more than welcome)
	First of all, it would be nice to improve the informativeness of
	the ioctl syscall(for the range of requests owned to v4l2). For
	instance, the existing information about pixel_format does not show
	the special flags defined in the Linux kernel like V4L2_PIX_FMT_*.
	Moreover, a current switch in the v4l2 ioctl decoder does not process
	the full list of requests. But it is a work just for the April.

	Regarding implementation, in case of advanced syscall info, you will
	have to type just the following command:

	$ strace %process_name% | asinfo

	After it will be look like that:

	*------------------------------------------------------------------------*
	*(num of syscall) write(input arguments) -> link to kernel implementation*
	* -> detailed information about input parameters in the pop-up menu      *
	*------------------------------------------------------------------------*
	For instance, write syscall:
	* 1|write(int fd, const void* buf, size_t count) => ssize_t (src)*
	*  +----o---> file descriptor fd
	*	|     fd = 3
	*       o---> buffer pointer buf
	*	|     buf = 0x923467654
	*	|     buf[0] = 0x343, buf[1] = 0x34, /*there will be smart
	*	|				      alignment */
	*	o---> number of bytes count
	*	|     count = 3
	*	|
	*	@>>>> return number of bytes written
	* etc
	I am going to use ncurses library to show these printings. Apart from
	showing info in running, the tool will be able to give the syscall's
	description via command line (in sure in the interactive mode)
	$ asinfo -l write

-> Mention the details of your academic studies, any previous work, internships
	B.Sc. Applied Physics and Mathematics (third-year student)
	Student of the Department of Radio Engineering and Cybernetics
	Moscow Institute of Physics and Technology (State University)
	Relevant computer science courses:
	computer architecture, operating systems, virtualization, parallel
	programming, computer networks
	Additional CS courses:
	Participant of Intel Lab (virtual machines, introduction to compilers)
	Participant of Intel Lab (C++ course)
	Emulation of computer architecture (implementation of CHIP16 CPU
	commands in Simics)
-> Any relevant skills that will help you to achieve the goal
   (programming languages, frameworks)?
	Advanced GIT knowledge(the commitment to QEMU helped me to achieve it)
	Advanced C knowledge(I so like C, because it makes me feel the hardware)
	Extensive experience in working with open-source projects
	Bash
	X86-assembly
	gdb
	autotools
	gnu make
-> Any previous open-source projects (or even previous GSoC) you have contributed to?
-> Any open-source code of yours that we can check out?
	1) FUSE-based file system(SFS)
	https://github.com/edosedgar/LSB_FUSE_SFS
	Brief description: the main purpose of this project
	was to implement the file system, which can be ported
	to the another architecture by rewriting just the block layer.
	2) The simple binary translator from the own virtual processor
	to the STM32F407 MCU based Cortex-M4
	https://github.com/edosedgar/stm8s/tree/master/STM8S105C6T6/Assembler/Project_2
	3) Development high-performing I/O sub-system for QEMU/KVM
	Brief Description: the implementation of Parallels format driver
	and snapshots
	Research director: Denis Lunev. Head of department in
	Virtuozzo, Inc and QEMU Maintainer
	NOTE: take into account that regardless of the project in the
	development, it does not affect on my commitment to the GSoC
	program(no more than 5 hours per week). If you are interested
	I can send out the current patch set to assess progress made.
	4) Enhanced design for sakura terminal emulator
	http://bazaar.launchpad.net/~dabisu/sakura/sakura/revision/560
-> Do you plan to have any other commitments during SoC that may affect you work?
   Any vacations/holidays planned? Will you be available full time to work on your project?
	No vacations planned
	I will be available full time to work at least 40 hours per week.
	Yes, I plan other commitment, as I was saying, to QEMU
	(no more than 4 hours per week, it's sort of hobby project)

To sum up, this program is purposed without doubt to get considerable experience
what it is like to be a part of the large project. And I am applying because I
have some experience in developing and it is a rare privilege to significantly
enhance one of the usefull program for developers.

Just so you know, I mentioned the QEMU several times, but I applied just for
your project.
